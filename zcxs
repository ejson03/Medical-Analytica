[1mdiff --git a/actions/modules/diagnose.py b/actions/modules/diagnose.py[m
[1mindex 98de39e..57086be 100644[m
[1m--- a/actions/modules/diagnose.py[m
[1m+++ b/actions/modules/diagnose.py[m
[36m@@ -47,8 +47,6 @@[m [mdef create_illness_vector(encoded_symptoms):[m
 [m
         number_of_symptoms_flagged = len(symptoms_df.loc[symptoms_df['similarity'] > threshold, 'symptom_flagged'])[m
 [m
[31m-        # logging.info(f"Flagged {number_of_symptoms_flagged} potential symptom matches")[m
[31m-[m
     return list(symptoms_df['symptom_flagged'])[m
 [m
 [m
[36m@@ -73,7 +71,6 @@[m [mdef get_diagnosis(illness_vector):[m
             .iloc[0][m
         )[m
 [m
[31m-        # logging.info(f"Diagnosing user with {illness}")[m
         diagnosis_string = f"Based on your symptoms it looks like you could have {illness}"[m
 [m
     else:[m
[36m@@ -82,8 +79,6 @@[m [mdef get_diagnosis(illness_vector):[m
             .sort_values(by='similarity', ascending=False)[['illness', 'similarity']][m
             .head(1)[m
         )[m
[31m-        # logging.info(f"Unable to find a diagnosis, the closest match was {closest_match['illness'].iloc[0]} "[m
[31m-        #              f"at {closest_match['similarity'].iloc[0]}")[m
         diagnosis_string = "Unfortunately I am unable to diagnose you based on the symptoms you provided"[m
 [m
     return diagnosis_string[m
[1mdiff --git a/chatbot/custom/Tracker4J.py b/chatbot/custom/Tracker4J.py[m
[1mindex fd07ced..677c2a7 100644[m
[1m--- a/chatbot/custom/Tracker4J.py[m
[1m+++ b/chatbot/custom/Tracker4J.py[m
[36m@@ -1,7 +1,8 @@[m
 from py2neo import Graph, Node, NodeMatcher, matching, Schema, Relationship, Transaction[m
 from neotime import DateTime[m
 from typing import List, Iterable, Iterator[m
[31m-[m
[32m+[m[32mimport pytz[m
[32m+[m[32masia = pytz.timezone('Asia/Kolkata')[m
 [m
 class Tracker4J:[m
     def __init__(self, profile=None, **args):[m
[36m@@ -50,12 +51,13 @@[m [mclass Tracker4J:[m
         self.CreateNode(self._message(events), sender_id)[m
 [m
     def CreateNode(self, msg, sender_id: str):[m
[32m+[m[41m        [m
         sender_id = str(sender_id)[m
         tx = self.graph.begin()[m
 [m
         user = Node("user", sender_id=sender_id)[m
[31m-        new_elem = Node("chat", **msg, created_at=DateTime.now(), sender_id=sender_id)[m
[31m-[m
[32m+[m[32m        new_elem = Node("chat", **msg, created_at=DateTime.now(asia), sender_id=sender_id)[m
[32m+[m[41m        [m
         previous = self._get_latest(tx, sender_id)[m
         tx.merge(user, "user", "sender_id")[m
         tx.create(new_elem)[m
[36m@@ -70,5 +72,6 @@[m [mclass Tracker4J:[m
             self._AddConstraint(sender_id)[m
 [m
 [m
[32m+[m
 # graph = Tracker4J("bolt://192.168.96.41:7687")[m
 # graph.CreateNodeFromEvents(ex,"ddd")[m
\ No newline at end of file[m
[1mdiff --git a/requirements.txt b/requirements.txt[m
[1mindex 096e6be..1d58598 100644[m
[1m--- a/requirements.txt[m
[1m+++ b/requirements.txt[m
[36m@@ -13,3 +13,4 @@[m [mrasa==1.10.14[m
 pyahocorasick[m
 py2neo[m
 neo4j[m
[32m+[m[32mpytz[m[41m[m
