version: "3.7"
services:
  mongodb:
    image: mongo:latest
    environment:
      MONGODB_USER: "${MONGO_USER}"
      MONGODB_PASS: "${MONGO_PASS}"
    ports:
      - "27017:27017"
    command: mongod
    restart: always

  bigchaindb:
    depends_on:
      - mongodb
      - tendermint
    build:
      context: bigchaindb
      dockerfile: Dockerfile-dev
    # volumes:
    #   - ./bigchaindb:/usr/src/app/bigchaindb
    #   - ./tests:/usr/src/app/tests
    #   - ./docs:/usr/src/app/docs
    #   - ./htmlcov:/usr/src/app/htmlcov
    #   - ./setup.py:/usr/src/app/setup.py
    #   - ./setup.cfg:/usr/src/app/setup.cfg
    #   - ./pytest.ini:/usr/src/app/pytest.ini
    #   - ./tox.ini:/usr/src/app/tox.ini
    environment:
      BIGCHAINDB_DATABASE_BACKEND: localmongodb
      BIGCHAINDB_DATABASE_HOST: mongodb
      BIGCHAINDB_DATABASE_PORT: 27017
      BIGCHAINDB_SERVER_BIND: 0.0.0.0:9984
      BIGCHAINDB_WSSERVER_HOST: 0.0.0.0
      BIGCHAINDB_WSSERVER_ADVERTISED_HOST: bigchaindb
      BIGCHAINDB_TENDERMINT_HOST: tendermint
      BIGCHAINDB_TENDERMINT_PORT: 26657
    ports:
      - "9984:9984"
      - "9985:9985"
      - "26658"
    healthcheck:
      test:
        [
          "CMD",
          "bash",
          "-c",
          "curl http://bigchaindb:9984 && curl http://tendermint:26657/abci_query",
        ]
      interval: 3s
      timeout: 5s
      retries: 3
    command: ".ci/entrypoint.sh"
    restart: always
    
  tendermint:
    image: tendermint/tendermint:v0.31.5
    volumes:
      - tm_data:/tendermint
    entrypoint: ""
    ports:
      - "26656:26656"
      - "26657:26657"
    command: sh -c "tendermint init && tendermint node --consensus.create_empty_blocks=false --proxy_app=tcp://bigchaindb:26658"
    restart: always

  vault:
    container_name: vault
    image: "vault"
    env_file:
      - .env
    ports:
      - 8200:8200
    cap_add:
      - "IPC_LOCK"
    depends_on: 
      - bigchaindb

  server:
    container_name: rasa-server
    env_file:
      - .env
    build:
      context: .
      dockerfile: Dockerfile
      target: chatbot
    volumes:
      - ./chatbot:/app
    ports:
      - 5005:5005

      
  action:
    container_name: rasa-action-server
    env_file:
      - .env
    build:
      context: .
      dockerfile: Dockerfile
      target: action
    volumes:
      - ./actions:/app
    depends_on:
      - server
   

  main:
    container_name: main
    env_file:
      - .env
    build:
      context: ./server
      dockerfile: Dockerfile
      target: app-backend
    volumes:
      - ./server:/app/server
    command: npm run deploy
    ports:
      - 5000:5000

  # rabbit:
  #   restart: always
  #   image: rabbitmq:alpine
  #   container_name: rabbit
  #   env_file:
  #     - .env

  # nginx:
  #   container_name: "nginx"
  #   restart: unless-stopped
  #   build:
  #     context: nginx
  #   ports:
  #     - 8002:8000
  #   links:
  #     - main

 

volumes:
  tm_data: {}
